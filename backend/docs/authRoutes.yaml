openapi: 3.0.3
info:
  title: Authentication API
  version: 1.0.0
  description: API endpoints for restaurant authentication
paths:
  /auth/restaurant/register:
    post:
      summary: Register a new restaurant
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterRestaurantRequest"
      responses:
        "201":
          description: Restaurant registered successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RegisterRestaurantResponse"
        "400":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /auth/restaurant/login:
    post:
      summary: Login a restaurant
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRestaurantRequest"
      responses:
        "200":
          description: Login successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginRestaurantResponse"
        "400":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /auth/restaurant/logout:
    post:
      summary: Logout a restaurant
      tags: [Authentication]
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string, example: "Logout successful" }
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /auth/restaurant/me:
    get:
      summary: Get restaurant information
      tags: [Authentication]
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Restaurant information retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Restaurant"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
components:
  schemas:
    Restaurant:
      type: object
      properties:
        id: { type: string, example: "rest_123" }
        name: { type: string, example: "Tasty Bistro" }
        email:
          { type: string, format: email, example: "contact@tastybistro.com" }
        slug: { type: string, example: "tasty-bistro" }
      required: [id, name, email, slug]
    RegisterRestaurantRequest:
      type: object
      properties:
        name: { type: string, example: "Tasty Bistro" }
        email:
          { type: string, format: email, example: "contact@tastybistro.com" }
        password: { type: string, format: password, example: "SecurePass123!" }
        slug: { type: string, example: "tasty-bistro" }
      required: [name, email, password, slug]
    RegisterRestaurantResponse:
      type: object
      properties:
        message: { type: string, example: "Restaurant registered successfully" }
        token:
          { type: string, example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..." }
      required: [message, token]
    LoginRestaurantRequest:
      type: object
      properties:
        email:
          { type: string, format: email, example: "contact@tastybistro.com" }
        password: { type: string, format: password, example: "SecurePass123!" }
      required: [email, password]
    LoginRestaurantResponse:
      type: object
      properties:
        message: { type: string, example: "Login successful" }
        token:
          { type: string, example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..." }
      required: [message, token]
    ErrorResponse:
      type: object
      properties:
        message: { type: string, example: "Validation error" }
        errors:
          {
            type: array,
            items: { type: string },
            example: ["Invalid email format"],
          }
      required: [message]
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
