openapi: 3.0.3
info:
  title: Order API
  version: 1.0.0
  description: API endpoints for managing orders
paths:
  /orders:
    post:
      summary: Create a new order
      tags: [Order]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateOrderRequest"
      responses:
        "201":
          description: Order created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        "400":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /orders/{orderId}:
    get:
      summary: Get order details
      tags: [Order]
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
            example: "order_123"
      responses:
        "200":
          description: Order details retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        "404":
          description: Order not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /restaurants/{id}/orders:
    get:
      summary: Get restaurant orders
      tags: [Order]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            example: "rest_123"
      responses:
        "200":
          description: Restaurant orders retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Order"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /orders/{orderId}/status:
    put:
      summary: Update order status
      tags: [Order]
      security:
        - bearerAuth: []
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
            example: "order_123"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateOrderStatusRequest"
      responses:
        "200":
          description: Order status updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string, example: "Order status updated" }
        "400":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /restaurants/{id}/orders/today:
    get:
      summary: Get today's orders
      tags: [Order]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            example: "rest_123"
      responses:
        "200":
          description: Today's orders retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Order"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /restaurants/{id}/orders/analytics:
    get:
      summary: Get order analytics
      tags: [Order]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            example: "rest_123"
      responses:
        "200":
          description: Order analytics retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrderAnalytics"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
components:
  schemas:
    Order:
      type: object
      properties:
        orderId: { type: string, example: "order_123" }
        restaurantSlug: { type: string, example: "tasty-bistro" }
        tableNumber: { type: integer, example: 1 }
        items:
          { type: array, items: { $ref: "#/components/schemas/OrderItem" } }
        totalAmount: { type: number, example: 29.99 }
        status:
          {
            type: string,
            enum: ["pending", "cooking", "ready", "served", "cancelled"],
            example: "cooking",
          }
        createdAt:
          { type: string, format: date-time, example: "2025-06-14T23:55:00Z" }
      required:
        [orderId, restaurantSlug, tableNumber, items, totalAmount, status]
    OrderItem:
      type: object
      properties:
        itemId: { type: string, example: "item_123" }
        quantity: { type: integer, example: 2 }
        price: { type: number, example: 9.99 }
      required: [itemId, quantity, price]
    CreateOrderRequest:
      type: object
      properties:
        restaurantSlug: { type: string, example: "tasty-bistro" }
        tableNumber: { type: integer, example: 1 }
        items:
          { type: array, items: { $ref: "#/components/schemas/OrderItem" } }
        totalAmount: { type: number, example: 29.99 }
      required: [restaurantSlug, tableNumber, items, totalAmount]
    UpdateOrderStatusRequest:
      type: object
      properties:
        status:
          {
            type: string,
            enum: ["pending", "cooking", "ready", "served", "cancelled"],
            example: "cooking",
          }
      required: [status]
    OrderAnalytics:
      type: object
      properties:
        totalOrders: { type: integer, example: 100 }
        totalRevenue: { type: number, example: 2999.99 }
        averageOrderValue: { type: number, example: 29.99 }
      required: [totalOrders, totalRevenue]
    ErrorResponse:
      type: object
      properties:
        message: { type: string, example: "Validation error" }
        errors:
          {
            type: array,
            items: { type: string },
            example: ["Invalid restaurant slug"],
          }
      required: [message]
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
