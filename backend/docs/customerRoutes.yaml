openapi: 3.0.3
info:
  title: Customer API
  version: 1.0.0
  description: API endpoints for customer interactions
paths:
  /customers/menu/{restaurantSlug}/table/{tableNumber}:
    get:
      summary: Get menu and table information
      tags: [Customer]
      parameters:
        - name: restaurantSlug
          in: path
          required: true
          schema:
            type: string
            example: "tasty-bistro"
        - name: tableNumber
          in: path
          required: true
          schema:
            type: integer
            example: 1
      responses:
        "200":
          description: Menu and table information retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MenuAndTableResponse"
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /orders/track:
    post:
      summary: Track an order
      tags: [Customer]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TrackOrderRequest"
      responses:
        "200":
          description: Order status retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        "400":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Order not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /restaurants/{slug}/info:
    get:
      summary: Get restaurant information
      tags: [Customer]
      parameters:
        - name: slug
          in: path
          required: true
          schema:
            type: string
            example: "tasty-bistro"
      responses:
        "200":
          description: Restaurant information retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Restaurant"
        "404":
          description: Restaurant not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
components:
  schemas:
    Restaurant:
      type: object
      properties:
        id: { type: string, example: "rest_123" }
        name: { type: string, example: "Tasty Bistro" }
        email:
          { type: string, format: email, example: "contact@tastybistro.com" }
        slug: { type: string, example: "tasty-bistro" }
      required: [id, name, email, slug]
    MenuItem:
      type: object
      properties:
        id: { type: string, example: "item_123" }
        name: { type: string, example: "Burger" }
        price: { type: number, example: 9.99 }
        description: { type: string, example: "Juicy beef burger" }
      required: [id, name, price]
    MenuCategory:
      type: object
      properties:
        name: { type: string, example: "Main Course" }
        items: { type: array, items: { $ref: "#/components/schemas/MenuItem" } }
      required: [name, items]
    Menu:
      type: object
      properties:
        categories:
          { type: array, items: { $ref: "#/components/schemas/MenuCategory" } }
      required: [categories]
    Table:
      type: object
      properties:
        number: { type: integer, example: 1 }
        status:
          {
            type: string,
            enum: ["occupied", "available"],
            example: "available",
          }
      required: [number]
    MenuAndTableResponse:
      type: object
      properties:
        menu: { $ref: "#/components/schemas/Menu" }
        table: { $ref: "#/components/schemas/Table" }
      required: [menu, table]
    TrackOrderRequest:
      type: object
      properties:
        orderId: { type: string, example: "order_123" }
      required: [orderId]
    Order:
      type: object
      properties:
        orderId: { type: string, example: "order_123" }
        restaurantSlug: { type: string, example: "tasty-bistro" }
        tableNumber: { type: integer, example: 1 }
        items:
          { type: array, items: { $ref: "#/components/schemas/OrderItem" } }
        totalAmount: { type: number, example: 29.99 }
        status:
          {
            type: string,
            enum: ["pending", "cooking", "ready", "served", "cancelled"],
            example: "cooking",
          }
        createdAt:
          { type: string, format: date-time, example: "2025-06-14T23:55:00Z" }
      required:
        [orderId, restaurantSlug, tableNumber, items, totalAmount, status]
    OrderItem:
      type: object
      properties:
        itemId: { type: string, example: "item_123" }
        quantity: { type: integer, example: 2 }
        price: { type: number, example: 9.99 }
      required: [itemId, quantity, price]
    ErrorResponse:
      type: object
      properties:
        message: { type: string, example: "Not found" }
        errors:
          { type: array, items: { type: string }, example: ["Order not found"] }
      required: [message]
